package dryclean.cyprusDryCleanEntities;

import java.util.Date;

/**
 * Represents an unsubscribed customer in the system.
 * Unsubscribed customers do not have a subscription but may receive loyalty-based discounts.
 * Extends the {@link Customer} class.
 *
 *
 *
 * @author Ferhat Kasim Koc
 * @version 23.0
 */
public class Unsubscribed extends Customer {



    /**
     * Default constructor initializing an unsubscribed customer with default values.
     */
    public Unsubscribed() {
        super(0, null, "Unknown", "Unknown", null);
    }


    /**
     * Constructs an unsubscribed customer with basic details.
     * @param ID The unique identifier for the customer.
     * @param name The first name of the customer.
     * @param surname The last name of the customer.
     * @param registrationDate The registration date of the customer.
     */
    public Unsubscribed(int ID, String name, String surname, Date registrationDate) {
        super(ID, null, name, surname, registrationDate);
    }



    /**
     * Constructs an unsubscribed customer with full details.
     * @param ID The unique identifier for the customer.
     * @param dateOfBirth The birthdate of the customer.
     * @param name The first name of the customer.
     * @param surname The last name of the customer.
     * @param registrationDate The registration date of the customer.
     */
    public Unsubscribed(int ID, Date dateOfBirth, String name, String surname, Date registrationDate) {
        super(ID, dateOfBirth, name, surname, registrationDate);
    }






    /**
     * Displays the details of the unsubscribed customer, including loyalty status.
     * Indicates the customer's total number of orders.
     */
    @Override
    public void displayCustomerDetails() {
        System.out.println("Customer ID: " + getID());
        System.out.println("Name: " + getName());
        System.out.println("Surname: " + getSurname());
        System.out.println("Birthday Date: " + getDateOfBirth());
        System.out.println("Registration Date: " + getRegistrationDate());
        System.out.println("Mr/Mrs. " + getSurname() + " is a unsubscribed customer.");
        System.out.println("Total Orders: " + getOrders().size());
    }



    /**
     * Calculates the discount for the unsubscribed customer based on loyalty.
     * Unsubscribed customers receive a 5% discount if they have been customers for 10 or more years.
     * @return The discount rate as a percentage
     */
    @Override
    public double calculateDiscount() {
        Date currentDate = new Date();

        //Calculating the year difference.
        long diffInMilliseconds = currentDate.getTime() - this.getRegistrationDate().getTime();
        long yearsOfLoyalty = diffInMilliseconds / (1000L * 60 * 60 * 24 * 365);

        // We will apply a 5% discount only if loyalty is 10 or more years
        if (yearsOfLoyalty >= 10) {
            return 0.05;
        }
        return 0.0; // We will apply no discount for loyalty less than 10 years
    }


    /**
     * Calculates the total income generated by the customer's orders,
     * ignoring any discounts.
     * @return The total income without discounts applied.
     */
    @Override
    public double calculateTotalOrderIncome() {
        double totalIncome = 0.0;
        for (Order order : this.getOrders()) {
            totalIncome += order.totalOrderCost(); // Total cost without discount
        }
        return totalIncome;
    }

}
